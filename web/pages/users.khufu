import {refresher, json} from '../middleware/request'
import {sockets} from '../stores/sockets'
import {repr, pprint, sum_values} from '../util/view'
import * as stores from '../stores/users.js'
import {bool, disable, toggle, value, init, put} from '../stores/simple.js'
import {pairs} from '../util/iter'


style:
  .group
    margin-left: 32px
    margin-top: 4px
    margin-bottom: 24px
  .small
    font-size: 12px
    margin-left: 8px
  h2.title
    padding-left: 16px
    border-bottom: solid #cbcbcb 1px
  .subsection
    margin-left: 32px
  .cmdline
    margin: 2px
  .process-info
    font-size: x-small
    color: gray
    padding-left: 8px


view show_group(uid, grp, sockets, show_processes):
  <h2.title>
    uid
    if grp.cgroups:
      if grp.cgroups.length < 5:
        `: ${ grp.cgroups.join(', ') }`
    elif grp.commands:
      if grp.commands.length < 5:
        `: ${ grp.commands.join(', ') }`
    else:
      ` (${ grp.kind })`
  <div.group>
    let uinfo = sockets.by_user[uid]
    let total = uinfo and uinfo.by_state
    store @showpro = bool | init(show_processes)
    store @showsock = bool | init(false)
    if total:
      <h3>
        `Sockets [${ total.LISTEN or 0 }/${ total.ESTABLISHED or 0 }] `
        <button.pure-button.small>
          link {click} toggle(@showsock) -> @showsock
          if @showsock:
            "hide"
          else:
            "show"
      <div.subsection>
        store @details = value
        if @showsock:
          let passive = sockets.passive[uid]
          let active = sockets.active[uid]
          if passive:
            <h4>
              "Passive"
            <table.pure-table>
              <thead>
                <tr>
                  <td> "Port"
                  <td> "Total"
                  <td> "Listening"
                  <td> "Established"
                  <td> "TimeWait"
                  <td> "CloseWait"
                  <td>
              <tbody>
                for [port, info] of pairs(passive) key port:
                  <tr>
                    <td>
                      port
                    <td>
                      (sum_values(info.stats.by_state)
                       + info.listeners.length)
                    <td>
                       info.listeners.length
                    <td>
                      info.stats.by_state.ESTABLISHED or ''
                    <td>
                      info.stats.by_state.TIME_WAIT or ''
                    <td>
                      info.stats.by_state.CLOSE_WAIT or ''
                    <td>
                      <button.pure-button.small>
                        link {click} put(['passive', port]) -> @details
                        "▼"
          if active:
            <h4>
              "Active"
            <table.pure-table>
              <thead>
                <tr>
                  <td> "Port"
                  <td> "Total"
                  <td> "Established"
                  <td> "TimeWait"
                  <td> "CloseWait"
                  <td>
              <tbody>
                for [port, info] of pairs(active) key port:
                  <tr>
                    <td>
                      port
                    <td>
                      sum_values(info.stats.by_state)
                    <td>
                      info.stats.by_state.ESTABLISHED or ''
                    <td>
                      info.stats.by_state.TIME_WAIT or ''
                    <td>
                      info.stats.by_state.CLOSE_WAIT or ''
                    <td>
                      <button.pure-button.small>
                        link {click} put(['active', port]) -> @details
                        "▼"
          if @details:
            let [kind, port] = @details
            let portinfo = sockets[kind][uid][port]
            <h4> `Details of ${ kind } ${ port }`
            if kind == 'active':
              <table.pure-table>
                <thead>
                  <tr>
                    <td> "Local"
                    <td> "Remote"
                    <td> "State"
                    <td> "Tx Q"
                    <td> "Rx Q"
                <tbody>
                  for item of portinfo.connections key repr(item):
                    <tr>
                      <td>
                        item.local_address
                      <td>
                        item.remote_address
                      <td>
                        item.state
                      <td>
                        item.tx_queue
                      <td>
                        item.rx_queue
            elif kind == 'passive':
              <h5> "Listening"
              <table.pure-table>
                <thead>
                  <tr>
                    <td> "Local"
                    <td> "Remote"
                    <td> "State"
                    <td> "Tx Q"
                    <td> "Rx Q"
                <tbody>
                  for item of portinfo.listeners key repr(item):
                    <tr>
                      <td>
                        item.local_address
                      <td>
                        item.remote_address
                      <td>
                        item.state
                      <td>
                        item.tx_queue
                      <td>
                        item.rx_queue
              <h5> "Clients"
              <table.pure-table>
                <thead>
                  <tr>
                    <td> "Local"
                    <td> "Remote"
                    <td> "State"
                    <td> "Tx Q"
                    <td> "Rx Q"
                <tbody>
                  for item of portinfo.clients key repr(item):
                    <tr>
                      <td>
                        item.local_address
                      <td>
                        item.remote_address
                      <td>
                        item.state
                      <td>
                        item.tx_queue
                      <td>
                        item.rx_queue
    <h3>
      `Processes [${ grp.processes.length }] `
      <button.pure-button.small>
        link {click} toggle(@showpro) -> @showpro
        if @showpro:
          "hide"
        else:
          "show"
    <div.subsection>
      if @showpro:
        <ul>
          for item of grp.processes key item.pid:
            if item.cmdline and not item.is_supervisor:
              <li>
                <pre.cmdline>
                  item.cmdline
                <div.process-info>
                  `pid: ${ item.pid },
                   mem: ${(item.rss / 1048576).toFixed(1)} MiB`


view groups(processes, sockets, showhidden):
  <div>
    for [uid, grp] of processes.entries() key uid:
      if grp.kind == 'container' or grp.kind == 'unknown' or showhidden:
        show_group(uid, grp, sockets)


view passive(sockets, processes):
  <div>
    store @current_uid = value
    <table.pure-table>
      <thead>
        <tr>
          <td> "Port"
          <td> "Groups"
      <tbody>
        for [port, uid] of sockets.ports key port + ':' + uid:
          <tr>
            <td>
              port
            <td>
              uid
              let grp = processes.get(uid)
              if grp:
                if grp.cgroups:
                  ` (${ grp.cgroups.join(', ') })`
                elif grp.commands:
                  if grp.commands.length < 5:
                    ` (${ grp.commands.join(', ') })`
                else:
                  ` (${ grp.kind })`
                <button.pure-button.small>
                  link {click} put(uid) -> @current_uid
                  "▼"
    if @current_uid != null:
      let grp = processes.get(@current_uid)
      if grp:
        show_group(@current_uid, grp, sockets, true)


view main():
  <div>
    store @sockets = stores.sockets | refresher | json('/all_sockets.json')
    store @processes = stores.processes | refresher
      | json('/all_processes.json')
    store @mode = value | init('groups')
    <div.title.error?(@sockets.error)>
      <h1>
        if @mode == 'groups':
          "Apps and Sockets By User"
          <button.pure-button.small>
            link {click} put('all_groups') -> @mode
            "show hidden"
          <button.pure-button.small>
            link {click} put('ports') -> @mode
            "by port"
        elif @mode == 'all_groups':
          "Apps and Sockets By User"
          <button.pure-button.small>
            link {click} put('groups') -> @mode
            "hide"
          <button.pure-button.small>
            link {click} put('ports') -> @mode
            "by port"
        elif @mode == 'ports':
          "Users by Listening Port"
          <button.pure-button.small>
            link {click} put('groups') -> @mode
            "show groups"

      if @sockets.error:
        <span.error>
          @sockets.error
      elif @sockets.latency:
        <span.latency
          title="Latency of getting statistics (the request roundtrip time)">
          `${@sockets.latency} ms`
    if @processes == null or @sockets.by_user == null:
      "Loading..."
    else:
      if @mode == 'groups':
        groups(@processes, @sockets, false)
      elif @mode == 'all_groups':
        groups(@processes, @sockets, true)
      elif @mode == 'ports':
        passive(@sockets, @processes)
