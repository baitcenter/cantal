import {fine_grained} from '../query/lang.js'
import {query} from '../middleware/local-query.js'
import * as stores from '../stores/status.js'
import {bool, toggle, disable, init} from '../stores/simple'
import {icon} from '../util/icon.khufu'
import {donut} from '../charts/donut.khufu'
import {compact} from '../charts/compact.khufu'
import {integral_formatter, bytes_formatter} from '../util/format'
import {number_formatter, already_percent_formatter} from '../util/format'
import {CPU_YAXIS} from '../settings/cpugraph'

style:
  .sample
    display: inline-block
    width: 1em
    height: 1em
  .right
    text-align: right
  .button
    cursor: pointer
    text-align: center
    border-top: solid rgb(203, 203, 203) 1px
  .center
    display: flex
    justify-content: center

view memtable(mem):
  <table.pure-table>
    store @open = bool | init(false)
    <thead>
      <tr>
        <th>
        <th>
          "Title"
        <th>
          "MiB"
    <tbody>
      for item of mem.items key item.title:
        if @open or not item.collapsed:
          <tr>
            <td>
              if item.color:
                <span.sample style=`background-color: ${item.color}`>
            <td>`${item.title}`
            <td.right>
              item.text
    <tfoot>
      <tr>
        <td.button colspan=3>
          link {click} toggle(@open) -> @open
          if @open:
            icon('arrow-up')
          else:
            icon('arrow-down')

view cpu(series):
  compact(1100, series.timestamps, [
        {
        'title': 'Cpu',
        'values': series.total,
        'yaxis': CPU_YAXIS
        },
        {
        'title': 'User',
        'values': series.user.values,
        'yaxis': CPU_YAXIS
        }, {
        'title': 'System',
        'values': series.system.values,
        'yaxis': CPU_YAXIS
        }, {
        'title': 'I/O Wait',
        'values': series.iowait.values,
        'yaxis': CPU_YAXIS
        }, {
        'title': 'IRQ',
        'values': series.irq.values,
        'yaxis': CPU_YAXIS
        }])

view net(series):
  let net_yaxis = {
    height: 40,
    bg_color: 'rgb(237,248,233)',
    skip_color: "white",
    format: bytes_formatter(),
    colors: [
        [1024*1024/8, 'rgb(186,228,179)'],      // mbit
        [100*1024*1024/8,'rgb(116,196,118)'],   // 100 mbit
        [1024*1024*1024/8, 'rgb(49,163,84)'],   // Gbit
        [10*1024*1024*1024/8, 'rgb(0,109,44)'], // 10 Gbit
        [1024*1024*1024*1024, "black"]
        ]
    }
  compact(1100, series.timestamps, [{
        'title': 'Receive',
        'values': series['rx.bytes'].values,
        'yaxis': net_yaxis
        }, {
        'title': 'Transfer',
        'values': series['tx.bytes'].values,
        'yaxis': net_yaxis
        }])

view disk(series, series_in_progress):
  let bytes_yaxis = {
    height: 40,
    bg_color: 'rgb(237,248,233)',
    skip_color: "white",
    format: bytes_formatter(),
    colors: [
        [1024, 'rgb(186,228,179)'],
        [100*1024,'rgb(116,196,118)'],
        [1024*1024, 'rgb(49,163,84)'],
        [1024*1024*1024, 'rgb(0,109,44)'],
        [1024*1024*1024*1024, "black"]
        ]
    }
  let ops_yaxis = {
    height: 40,
    bg_color: 'rgb(237,248,233)',
    skip_color: "white",
    format: integral_formatter(),
    colors: [
        [5, 'rgb(186,228,179)'],
        [20,'rgb(116,196,118)'],
        [100, 'rgb(49,163,84)'],
        [1000, 'rgb(0,109,44)'],
        [100000, "black"]
        ]
    }
  let num_yaxis = {
    height: 40,
    bg_color: 'rgb(237,248,233)',
    skip_color: "white",
    format: integral_formatter(),
    colors: [
        [5, 'rgb(186,228,179)'],
        [10,'rgb(116,196,118)'],
        [20, 'rgb(49,163,84)'],
        [100, 'rgb(0,109,44)'],
        [1000, "black"]
        ]
    }
  compact(1100, series.timestamps, [{
      'title': 'Disk Read Ops',
      'values': series['read.ops'].values,
      'yaxis': ops_yaxis
      }, {
      'title': 'Disk Write Ops',
      'values': series['write.ops'].values,
      'yaxis': ops_yaxis
      }, {
      'title': 'Disk Read Bytes',
      'values': series['read.bytes'].values,
      'yaxis': bytes_yaxis
      }, {
      'title': 'Disk Write Bytes',
      'values': series['write.bytes'].values,
      'yaxis': bytes_yaxis
      }, {
      'title': 'Disk in Progress Ops',
      'values': series_in_progress['in_progress'].values,
      'yaxis': num_yaxis
      }])

view main():
  <h2> "Memory"
  <div.pure-g>
    store @mem = stores.memory
      | query(fine_grained().matching('metric', '^memory\\.').tip())
    <div.pure-u-1-2.center>
      if @mem:
        donut(@mem.items, 256, 256, @mem.total)
    <div.pure-u-1-2>
      if @mem:
        memtable(@mem)
      else:
        "Loading ..."

  <h2> "CPU"
  <div.pure-g>
    <div.pure-u-1>
      store @cpu = stores.cpu
        | query(fine_grained().matching('metric', '^cpu\\.').history()
                .derivative().sumby('metric'))
      if not @cpu:
        "Loading ..."
      else:
        cpu(@cpu)

  <h2> "Network"
  <div.pure-g>
    <div.pure-u-1>
      store @net = stores.prefix_chart('net.interface.')
        | query(fine_grained()
          .matching('metric', '^net.interface.[rt]x.bytes')
          .non_matching('interface', '^tun|^vboxnet|^lo$')
          .history().derivative().sumby('metric'))
      if not @net:
        "Loading ..."
      else:
        net(@net)

  <h2> "Disk"

  <div.pure-g>
    <div.pure-u-1>
      store @disk = stores.prefix_chart('disk.')
        | query(fine_grained()
          .matching('metric', "^disk\\.(?:read|write)" + "\\.(:?ops|bytes)$")
          .matching('device', "^sd[a-z]$")
          .history().derivative().sumby('metric'))
      store @disk_pro = stores.prefix_chart('disk.')
        | query(fine_grained()
          .matching('metric', "^disk\\.in_progress$")
          .matching('device', "^sd[a-z]$")
          .history().sumby('metric'))
      if not @disk:
        "Loading ..."
      else:
        disk(@disk, @disk_pro)

