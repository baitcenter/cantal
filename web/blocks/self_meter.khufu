import {format_uptime, format_diff, till_now_ms, from_ms} from '../util/time'
import {already_percent_formatter, bytes_formatter} from '../util/format'
import {entries} from '../util/object'


style:
  .row
    display: flex
    min-width: 36ex
  .key
    min-width: 20ex
  .value
    align-self: flex-end


view small(report, threads_report):
  let percent = already_percent_formatter()
  let mem = bytes_formatter()
  <span>
    `${mem(report.memory_rss)}/${percent(report.process_cpu_usage)}`


view big(report, threads_report):
  let percent = already_percent_formatter()
  let mem = bytes_formatter()
  <div.row>
    <span.key> "Since (interval)"
    <span.value> `${format_diff(till_now_ms(from_ms(report.timestamp_ms)))}
                  (${format_diff(report.duration_ms)})`
  <div.row>
    <span.key> "System CPU"
    <span.value> `${percent(report.global_cpu_usage)}`
  <div.row>
    <span.key> "CPU"
    <span.value> `${percent(report.process_cpu_usage)}`
  <div.row>
    <span.key> "CPU (w. children)"
    <span.value> `${percent(report.gross_cpu_usage)}`
  <div.row>
    <span.key> "Uptime"
    <span.value> `${format_uptime(till_now_ms(from_ms(report.start_time_ms)))}`
  <div.row>
    <span.key> "System Uptime"
    <span.value> `${format_uptime(report.system_uptime_ms)}`
  <div.row>
    <span.key> "RSS (Peak)"
    <span.value> `${mem(report.memory_rss)} / ${mem(report.memory_rss_peak)}`
  <div.row>
    <span.key> "Virtual (Peak)"
    <span.value> `${mem(report.memory_virtual)}
                  / ${mem(report.memory_virtual_peak)}`
  <div.row>
    <span.key> "Swap (Peak)"
    <span.value> `${mem(report.memory_swap)} / ${mem(report.memory_swap_peak)}`
  <div.row>
    <span.key> "Disk R/W b/s"
    <span.value> `${mem(report.disk_read)} / ${mem(report.disk_write)}`
  <div>
    for [name, data] of entries(threads_report) key name:
      <div.row>
        <span.key> `Thr. ${name}`
        <span.value> `${percent(data.cpu_usage)} / ${percent(data.user_cpu)}`

