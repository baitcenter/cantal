import {go} from 'khufu-routing'
import {format_uptime, format_diff, till_now_ms, from_ms} from './util/time'
import {memory, cpu, self_cpu, self_mem} from './stores/status'
import {value, bool, toggle, init} from './stores/simple'
import {refresher, json} from './middleware/request'
import {query} from './middleware/local-query.js'
import {fine_grained} from './query/lang.js'
import {donut} from './charts/donut.khufu'
import {sparkline} from './charts/sparkline.khufu'
import {already_percent_formatter, bytes_formatter} from './util/format'
import {CPU_YAXIS} from './settings/cpugraph'
import * as self_meter from './blocks/self_meter.khufu'
import {beacon} from './graphql'

import {main as enable_remote} from './pages/enable_remote.khufu'
import {main as status} from './pages/status.khufu'
import {main as processes} from './pages/processes.khufu'
import {main as states} from './pages/states.khufu'
import {main as process_metrics} from './pages/process_metrics.khufu'
import {main as cgroups} from './pages/cgroups.khufu'
import {main as metrics} from './pages/metrics.khufu'
import {main as peers} from './pages/peers.khufu'
import {main as tmp_sockets} from './pages/tmp_sockets.khufu'
import {main as users} from './pages/users.khufu'
import {main as remote_list} from './pages/remote/list.khufu'
import {main as remote_grid} from './pages/remote/grid.khufu'
import {main as remote_containers} from './pages/remote/containers.khufu'

style:
  .info
    font-size: xx-small
    padding: 0px 16px 4px 16px
  .hanging-button
    position: absolute
    right: 2px
    top: 2px
  .pure-menu
    position: relative
  .offset-bottom
    margin-bottom: 24px
  .offset-top
    margin-top: 16px
  .machine-up
    padding: 0px 16px 4px 16px
  .cantal-status
    font-size: x-small
    padding: 0px 16px 4px 16px
    color: #565d64
  .pointer
    cursor: pointer
  .graphs
    display: flex
    width: 100%
    flex-direction: row
    justify-content: space-around
    align-items: center
    padding: 8px
  .cpugraph
    border: solid gray 2px
    -webkit-border-radius: 3px
    -moz-border-radius: 3px
    border-radius: 3px

  .meter-btn
    font-size: xx-small
    margin-left: 8px


view _local_menu(router):
  <li.pure-menu-item.pure-menu-active?(router.at('status'))>
    <a.pure-menu-link href="/local/status">
      link {click} go(event) -> @router
      "Status"
  <li.pure-menu-item.pure-menu-active?(router.at('processes'))>
    <a.pure-menu-link href="/local/processes">
      link {click} go(event) -> @router
      "Processes"
      if beacon:
        ` [${ beacon.processes }]`
  <li.pure-menu-item.pure-menu-active?(router.at('states'))>
    <a.pure-menu-link href="/local/states">
      link {click} go(event) -> @router
      "States"
  <li.pure-menu-item.pure-menu-active?(router.at('cgroups'))>
    <a.pure-menu-link href="/local/cgroups">
      link {click} go(event) -> @router
      "CGroups"
  <li.pure-menu-item.pure-menu-active?(router.at('users'))>
    <a.pure-menu-link href="/local/users">
      link {click} go(event) -> @router
      "Users / Network"
  <li.pure-menu-item.pure-menu-active?(router.at('process_metrics'))>
    <a.pure-menu-link href="/local/process_metrics">
      link {click} go(event) -> @router
      "Process Metrics"
  <li.pure-menu-item.pure-menu-active?(router.at('metrics'))>
    <a.pure-menu-link href="/local/metrics">
      link {click} go(event) -> @router
      "Metrics"
      if beacon:
        ` [${ beacon.tipValues } + ${ beacon.fineValues }]`

  <li.pure-menu-item.pure-menu-active?(router.at('peers'))>
    <a.pure-menu-link href="/local/peers">
      link {click} go(event) -> @router
      "Pings"

view _remote_menu(router):
  <li.pure-menu-item.pure-menu-active?(router.at('peers'))>
    <a.pure-menu-link href="/remote/peers">
      link {click} go(event) -> @router
      "Pings"

  <li.pure-menu-item.pure-menu-active?(router.at('list'))>
    <a.pure-menu-link href="/remote/list">
      link {click} go(event) -> @router
      "Peers"

  <li.pure-menu-item.pure-menu-active?(router.at('grid'))>
    <a.pure-menu-link href="/remote/grid">
      link {click} go(event) -> @router
      "Grid"

  <li.pure-menu-item.pure-menu-active?(router.at('containers'))>
    <a.pure-menu-link href="/remote/containers">
      link {click} go(event) -> @router
      "Containers"


view self_status(beacon):
  <div.graphs>
    store @mem = memory
      | query(fine_grained().matching('metric', '^memory\\.').tip())
    if @mem:
      <div.memgraph>
        donut(@mem.items, 52, 52, @mem.total)

    store @cpu_metrics = cpu
      | query(fine_grained().matching('metric', '^cpu\\.').history()
              .derivative().sumby('metric'))
    if @cpu_metrics:
      <div.cpugraph>
        sparkline(120, @cpu_metrics.timestamps, [{
            'title': 'Cpu',
            'values': @cpu_metrics.total,
            'yaxis': CPU_YAXIS
            }])

  <div.machine-up>
    "up "
    format_uptime(till_now_ms(from_ms(beacon.bootTime)))
  <div.cantal-status>
    <span.pointer title="Uptime of the cantal agent itself">
      "up "
      format_uptime(till_now_ms(from_ms(beacon.startupTime)))
    " "
    <span.pointer title="Latency of requests to the cantal">
      `${beacon.latency}ms`
    " "
    <span.pointer
        title="Time it takes for cantal to read all stats once">
      `${beacon.scanDuration}ms`
    " "
    store @expand = bool | init(false)
    if beacon.selfReport and beacon.threadsReport:
      self_meter.small(beacon.selfReport, beacon.threadsReport)
      <button.pure-button.meter-btn>
        link {click} toggle(@expand) -> @expand
        if @expand:
          "▲"
        else:
          "▼"
    if @expand and beacon:
      self_meter.big(beacon.selfReport, beacon.threadsReport)


view main(router, version):
  <div.pure-g>
    <div.pure-u-1.pure-u-md-1-3.pure-u-xl-4-24>
      <div.pure-menu>
        <div.hanging-button>
          <label>
            let on = beacon.hasRemote
            let rtr = @router
            let at_remote = not not router.at('remote')
            <input.ios-switch.bigswitch.pregreen?(on).blue?(on)
              type="checkbox" value='ok' checked=at_remote>
              link {click} go(
                router.rel(at_remote ? '/local' : '/remote')
              ) -> @router
            <div>
              <div>
        <a.pure-menu-heading href="/">
          "Cantal"
        <ul.pure-menu-list>
          if beacon:
            <li.info>
              `${ beacon.version } / ${ version }`
            <li.info>
              `${ beacon.hostname } / ${ beacon.name } /
                ${ beacon.clusterName or "standalone" }`
            <li.info.offset-bottom>
              `${ beacon.id }`
          if let sub = router.at('remote'):
            _remote_menu(sub)
          elif let sub = router.at('local'):
            _local_menu(sub)
          else:
            _local_menu(router)
          if beacon:
            <li.offset-top.pure-menu-item>
              self_status(beacon)

    <div.pure-u-1.pure-u-md-2-3.pure-u-xl-20-24>
      if let sub = router.at('local'):
        if let sub = sub.at('status'):
          status(sub)
        elif let sub = sub.at('processes'):
          processes(sub)
        elif let sub = sub.at('states'):
          states()
        elif let sub = sub.at('process_metrics'):
          process_metrics()
        elif let sub = sub.at('cgroups'):
          cgroups()
        elif let sub = sub.at('metrics'):
          metrics()
        elif let sub = sub.at('peers'):
          peers()
        elif let sub = sub.at('tmp-sockets'):
          tmp_sockets()
        elif let sub = sub.at('users'):
          users()
        else:
          <h1> "404 Page Not Found"
          `Unknown page ${ sub.value()[0] }`
      elif let sub = router.at('remote'):
        if beacon.hasRemote:
          if let sub = sub.at('peers'):
            peers()
          elif let sub = sub.at('list'):
            remote_list()
          elif let sub = sub.at('grid'):
            remote_grid()
          elif let sub = sub.at('containers'):
            remote_containers()
          else:
            <h1> "404 Page Not Found"
            `Unknown page ${ sub.value()[0] }`
        else:
          enable_remote()
      else:
        status(router)

