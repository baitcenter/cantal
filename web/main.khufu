import {last_beacon as beacon, remote_enabled} from './websock'
import {createStore} from 'redux'
import {bool, toggle, disable} from './stores/simple'
import {main as enable_remote} from './pages/enable_remote.khufu'
import {main as status} from './pages/status.khufu'
import {createRoute, path, go} from './util/routing'

style:
  .version
    font-size: xx-small
    padding: 0px 16px 8px 16px



view _local_menu():
  <li.pure-menu-item>
    <a.pure-menu-link href="/local/status">
      "Status"
  <li.pure-menu-item>
    <a.pure-menu-link href="/local/processes">
      "Processes"
      if beacon:
        ` [${ beacon.processes }]`
  <li.pure-menu-item>
    <a.pure-menu-link href="/local/metrics">
      "Metrics"
      if beacon:
        ` [${ beacon.values }]`
  <li.pure-menu-item>
    <a.pure-menu-link href="/local/peers">
      "Pings"

view _remote_menu():
  <li.pure-menu-item>
    <a.pure-menu-link href="/remote/peers">
      "Pings"

  <li.pure-menu-item>
    <a.pure-menu-link href="/remote/list">
      "Peers"

  <li.pure-menu-item>
    <a.pure-menu-link href="/remote/grid">
      "Grid"


view main():
  <div.pure-g>
    store @base = createRoute(path)
    let remote = @base.segment == 'remote'
    <div.pure-u-1.pure-u-md-1-3.pure-u-xl-4-24>
      <div.pure-menu>
        <a.pure-menu-heading href="/">
          `Cantal`
        <ul.pure-menu-list>
          if beacon:
            <li.version.pure-menu-item>
              beacon.version
          <li.pure-menu-item>
            <label>
              let on = remote_enabled()
              <input.ios-switch.bigswitch.pregreen?(on).blue?(on)
                type="checkbox" value='ok' checked=remote>
                link {click} go(remote ? '/local' : '/remote') -> @base
              <div>
                <div>
          if remote:
            _remote_menu()
          else:
            _local_menu()
    <div.pure-u-1.pure-u-md-2-3.pure-u-xl-20-24>
      if not remote:
        status()
      else:
        if remote_enabled():

        else:
          enable_remote()
