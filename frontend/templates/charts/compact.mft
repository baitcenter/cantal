import {format_datetime} from 'util/time'
import compact from 'util/charts/compact'
import {Follow} from 'util/stores'

css:
  .bar
    height: 41px
    border-bottom: solid black 1px
    position: relative
  .title
    font-family: Verdana, Tahoma, sans-serif
    text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5)
    position: absolute
    left: 12px
    top: 8px
    font-size: 18px
  .value
    font-family: Verdana, Tahoma, sans-serif
    text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5)
    font-size: 18px
    position: absolute
    right: 0px
    top: 0px
    padding-top: 8px
    padding-right: 8px
    height: 41px
  .value.follow
    border-right: solid black 1px
  .footer
    position: relative
  .footer-time
    position: absolute
    right: 0px
    top: 0px
    padding-top: 8px
    padding-right: 8px
    height: 41px
  .xaxis
    height: 40px
    position: relative
    border-bottom: solid black 1px
    padding-bottom: 0px
  line.tick
    stroke: black
  text.tick
    font-family: Verdana, Tahoma, sans-serif
    text-anchor: middle
    font-size: 12px

html render(width, timestamps, items):
  div
    store mouse_position = new Follow()
    link {mousemove,mouseenter,mouseleave} = mouse_position
    let xaxis = compact.xaxis(timestamps, width)
    .xaxis[style={'width': width+'px'}]
      svg[width="{width}", height="40"]
        for tick of xaxis.ticks key tick.text:
          g[transform="translate({tick.x}, 40)"]
            line.tick[y2="-6", x2="0"]
            text.tick[y="-8"] "{tick.text}"
    div
      for item of items key item.title:
        if item.values:
          .bar[style={'width': width + 'px'}]
            =compact.draw(xaxis, item.yaxis, item.values)
            .title "{item.title}"
            if mouse_position.x != null and mouse_position.x < width:
              .value.follow[style={'right': width - mouse_position.x + 'px'}]
                let px = xaxis.pixels[mouse_position.x]
                if px:
                  if !isNaN(item.values[px.index]):
                    if item.yaxis.format:
                      =String(item.yaxis.format(item.values[px.index]))
                    else:
                      =String(item.values[px.index].toFixed(2))
                else:
                  "--"
            else:
              .value
                if !isNaN(item.values[0]):
                  if item.yaxis.format:
                    =String(item.yaxis.format(item.values[0]))
                  else:
                    =String(item.values[0].toFixed(2))
        else:
          .bar.nodata[style={'width': width+'px'}]
            "-- no data --"
    if mouse_position.x != null and mouse_position.x < width:
      .footer[style={'width': width+'px'}]
        .footer-time.follow[style={'right': width - mouse_position.x + 'px'}]
          let px = xaxis.pixels[mouse_position.x]
          if px:
            "{format_datetime(px.exact_time)}"
          else:
            "--"
    else:
      .footer[style={'width': width+'px'}]
        let px = xaxis.pixels[width-1]
        if px:
          .footer-time "{format_datetime(px.exact_time)}"

