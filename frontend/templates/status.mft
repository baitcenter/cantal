import {component} from 'util/base'
import {Toggle} from 'util/stores'
import {DonutChart} from 'util/donut'
import donut from 'templates/donut.mft'
import plot from 'templates/plot.mft'
import compact from 'templates/charts/compact.mft'
import {last} from 'util/list'

css:
  .sample
      display: inline-block
      width: 1em
      height: 1em

html render(error, timestamps, mem_chart, network, disk):
  .container
    h1 "System Status"
    if error:
      div
        "Error:"
        =error

    h2 "Memory"
    .row
      .col-xs-4[style={'margin': '48px 24px'}]
        if mem_chart.items:
          =donut.render(mem_chart.items, 256, 256, mem_chart.total)
      .col-xs-4
        table.table.table-condensed.table-hover
          store toggle = new Toggle()
          thead
            tr
              th
              th "Title"
              th.text-right 'MiB'
          tbody
            for item of mem_chart.items:
              if toggle.visible or not item.collapsed:
                tr
                  td
                    if item.color:
                      span.sample[style='background-color: {item.color}']
                  td "{item.title}"
                  td.text-right
                    =item.text
          tfoot
            tr
              td
              td.text-center
                button.btn.btn-default.btn-xs
                  link click = toggle.toggle
                  if toggle.visible:
                    span.glyphicon.glyphicon-chevron-up
                  else:
                    span.glyphicon.glyphicon-chevron-down
              td

    let net_yaxis = {
      height: 40,
      bg_color: 'rgb(237,248,233)',
      skip_color: "white",
      colors: [
          [1024, 'rgb(186,228,179)'],
          [100*1024,'rgb(116,196,118)'],
          [1024*1024, 'rgb(49,163,84)'],
          [1024*1024*1024, 'rgb(0,109,44)'],
          [1024*1024*1024*1024, "black"]
          ]
      }
    h2 "Network"
    if network:
      =compact.render(timestamps, [{
            'title': 'Receive',
            'values': network['net.interface.rx.bytes'],
            'last': last(network['net.interface.rx.bytes']),
            'yaxis': net_yaxis
            }, {
            'title': 'Transfer',
            'values': network['net.interface.tx.bytes'],
            'last': last(network['net.interface.tx.bytes']),
            'yaxis': net_yaxis
            }])

    h2 "Disks"
    let bytes_yaxis = {
      height: 40,
      bg_color: 'rgb(237,248,233)',
      skip_color: "white",
      colors: [
          [1024, 'rgb(186,228,179)'],
          [100*1024,'rgb(116,196,118)'],
          [1024*1024, 'rgb(49,163,84)'],
          [1024*1024*1024, 'rgb(0,109,44)'],
          [1024*1024*1024*1024, "black"]
          ]
      }
    let ops_yaxis = {
      height: 40,
      bg_color: 'rgb(237,248,233)',
      skip_color: "white",
      colors: [
          [5, 'rgb(186,228,179)'],
          [20,'rgb(116,196,118)'],
          [100, 'rgb(49,163,84)'],
          [1000, 'rgb(0,109,44)'],
          [100000, "black"]
          ]
      }
    if disk:
      =compact.render(timestamps, [{
            'title': 'Disk Read Ops',
            'values': disk['disk.read.ops'],
            'last': last(disk['disk.read.ops']),
            'yaxis': ops_yaxis
            }, {
            'title': 'Disk Write Ops',
            'values': disk['disk.write.ops'],
            'last': last(disk['disk.write.ops']),
            'yaxis': ops_yaxis
            }])
