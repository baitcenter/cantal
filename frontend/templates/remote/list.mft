import {Toggle, Store, Value} from 'util/stores'
import {format_diff, till_now_ms, from_ms} from 'util/time'

css:
  pre.short
    height: 1em
    overflow: hide
  .corner
    position: absolute
    right: 8px
    top: 8px
  .beacon
    display: inline-block
    margin-right: 8px
  .relative
    position: relative

html render(peers, peer_map):
  table.table.table-bordered.table-hover
    thead
      tr
        th "IP"
        th "Hostname"
        th "Connected"
        th "Last Beacon"
        th "Beacon"
        th "Latency"
    tbody
      for p of peers:
        tr
          td "{p.addr}"
          if peer_map[p.addr]:
            td
              let port = p.addr.split(':')[1]
              =String(peer_map[p.addr])
              " "
              a.btn.btn-default.btn-xs[href="http://{peer_map[p.addr]}:{port}"]
                span.glyphicon.glyphicon-play
          else:
            td.text-muted
              "∅"
          td "{p.connected}"
          td.text-muted?(p.last_beacon_time == null)
            if p.last_beacon_time:
              =format_diff(till_now_ms(
                             from_ms(p.last_beacon_time)))
            else:
              "never"
          td.text-muted?(p.last_beacon == null).relative
            store toggle = new Toggle()
            if p.last_beacon:
              if toggle.visible:
                pre
                  =JSON.stringify(p.last_beacon, null, '  ')
              else:
                .beacon
                  "Values: {p.last_beacon.values}, "
                  "peers: {p.last_beacon.peers}"
            else:
              "∅"
            button.float-right.btn.btn-default.btn.btn-xs.corner?(toggle.visible)
              link click = toggle.toggle
              if toggle.visible:
                span.glyphicon.glyphicon-chevron-up
              else:
                span.glyphicon.glyphicon-chevron-down
          td.text-muted?(p.last_beacon == null)
            if p.last_beacon:
              =String(p.last_beacon_time -
                      p.last_beacon.current_time)
              "ms"
            else:
              "∅"
