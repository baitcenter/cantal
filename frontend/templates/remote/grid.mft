import {QueryRemote} from 'util/query'
import {cpu_usage, mem_chart} from 'util/compute'
import donut from 'templates/donut.mft'
import sparkline from 'templates/charts/sparkline.mft'
import {number_formatter, already_percent_formatter} from 'util/format'
import {get_port} from 'pages/remote'

css:
  .peer
    float: left
    display: inline-block
    width: 165px
    min-height: 160px
    text-align: center
    border: solid rgba(44, 162, 95, 0.5) 4px
    border-radius: 8px
    margin: 2px
    position: relative
  .latency
    float: right
  .question
    font-size: 120px
  .addr-row
    display: flex
    flex-direction: row
    padding: 2px
  .addr
    font-family: Consolas, monospace
    overflow: hidden
    text-overflow: ellipsis
  .addr-btn
    min-width: 24px
  .donut-container, .sparkline-container
    margin: 4px

html render(peer_map):
  div
    store grid_query = new QueryRemote({
      'memory': {
        'series': {
          'source': 'Fine',
          'condition': ['RegexLike', 'metric', '^memory\\.']
        },
        "extract": ['Tip'],
        "functions": []},
        'cpu_total': {
          'series': {
            'source': 'Fine',
            'condition': ['RegexLike', 'metric', '^cpu\\.']},
          'extract': ['HistoryByNum', 150],
          'functions': [['NonNegativeDerivative'], ['Sum', 'Ignore']]
        },
        'cpu_idle': {
          'series': {
            'source': 'Fine',
            'condition': ['Eq', 'metric', 'cpu.idle']},
          'extract': ['HistoryByNum', 150],
          'functions': [['NonNegativeDerivative']]
        }
    })
    let cpu_yaxis = {
      height: 40,
      bg_color: 'rgb(237,248,233)',
      skip_color: "white",
      format: already_percent_formatter(),
      colors: [
        [100, 'rgb(186,228,179)'],
        [200,'rgb(116,196,118)'],
        [800, 'rgb(49,163,84)'],
        [1600, 'rgb(0,109,44)'],
        [6400, "black"]
      ]
    }
    .latency "{grid_query.latency}ms"
    div
      for peer of Object.keys(peer_map).concat('myself'):
        div
          let name = peer_map[peer] or peer.split(':')[0]
          let port = get_port(peer)
          if grid_query.response and grid_query.response.has(peer):
            .peer
              let stats = grid_query.response.get(peer)

              let mem = mem_chart(stats.get('memory'))
              .donut-container
                =donut.render(mem.items, 120, 120, mem.total)

              let usage = cpu_usage(stats.get('cpu_total').chunk,
                                    stats.get('cpu_idle').chunks[0][1])
              .sparkline-container
                =sparkline.render(150, stats.get('cpu_total').timestamps, [{
                      'title': 'Cpu',
                      'values': usage,
                      'yaxis': cpu_yaxis
                      }])
              .addr-row
                .addr
                  "{name} "
                if name != 'myself':
                  a.addr-btn.btn.btn-default.btn-xs[href="http://{name}:{port}"]
                    span.glyphicon.glyphicon-play
          else:
            .peer
              .question "?"
              .addr-row
                .addr
                  "{name} "
                if name != 'myself':
                  a.btn.btn-default.btn-xs[href="http://{name}:{port}"]
                    span.glyphicon.glyphicon-play
