commands:

  make-js: !Command
    description: Build javascripts
    container: js
    work-dir: web
    accepts-arguments: true
    run: |
      [ -d ../public/js ] || mkdir ../public/js
      exec webpack --progress "$@"

  _make-js-for-package: !Command
    description: Build javascripts for packaging
    container: js
    run: |
      set -ex
      [ -d public/js ] || mkdir public/js
      version=$(git describe --dirty)
      NODE_ENV=production \
        bulk with-version "${version}" \
          sh -c "cd web && webpack"

  make-bin: !Command
    description: Build cantal binaries
    container: xenial
    run: [cargo, build, --release]

  build: !Command
    description: Build debugging binary
    container: xenial
    run: [cargo, build]

  make: !Command
    description: Build cantal binaries and javascript in ubuntu container
    container: xenial
    prerequisites: [make-bin, make-js]
    run: |
      cp -f ./target/release/cantal-agent .

  test: !Command
    description: Run cargo tests
    container: xenial
    run: [cargo, test]

  cargo: !Command
    description: Run arbitrary cargo command
    work-dir: /work
    container: xenial
    symlink-name: cargo
    run: [cargo]

  bulk: !Command
    description: Run arbitrary bulk command (for version bookeeping)
    container: xenial
    run: [bulk]

  cargo-outdated: !Command
    description: Check for outdated dependencies
    container: outdated
    run: [cargo, outdated]

  doc: !Command
    description: Build HTML docs
    container: doc
    work-dir: docs
    run: [make, html]

  build-static-cli: !Command
    description: "Build static `cantal` binary. This is just for easier testing
      of metrics coverage. It doesn't build `cantal-agent` binary which you
      need for real work"
    container: rust-musl
    work-dir: cantal_values
    run: [cargo, build, --target=x86_64-unknown-linux-musl]
    epilog: |
      -------------------------------------------------------------------------
      Binary is build and placed in:
        cantal_values/target/x86_64-unknown-linux-musl/{release,debug}/cantal

  build-static-cli-package: !Command
    description: Build static command-line tool package
    container: rust-musl
    run: |
      set -ex
      (cd cantal_values; cargo build --target=x86_64-unknown-linux-musl)
      [ -d dist ] || mkdir dist
      tar -czf dist/cantal-cli-$(git describe).tar.gz \
        -C ./cantal_values/target/x86_64-unknown-linux-musl/release \
        cantal

  run: !Command
    prerequisites: [make]
    <<: &run
      description: Runs cantal (is not very useful run in container)
      container: xenial
      environ:
        CANTAL_LOG: info
      run:
      - ./cantal-agent
      - --host=0.0.0.0
      - --config-dir=/work/example-configs

  debug-run: !Command
    prerequisites: [build, make-js]
    <<: &run
      description: Runs cantal (is not very useful run in container)
      container: xenial
      environ:
        CANTAL_LOG: debug
        RUST_BACKTRACE: 1
      run: |
        cp ./target/debug/cantal-agent .
        ./cantal-agent --host=0.0.0.0 --config-dir=/work/example-configs

  run-with-process: !Command
    prerequisites: [make]
    description: Runs cantal with test process submitting data
    container: xenial
    environ:
      CANTAL_LOG: debug
    run: |
      ./cantal-agent --host=0.0.0.0 --config-dir=/work/example-configs &
      CANTAL_APPNAME=example CANTAL_PATH=/tmp/cantal python3 py3/example.py

  run-with-process-flood: !Command
    prerequisites: [make]
    description: Runs cantal and lots of processes
    container: xenial
    environ:
      CANTAL_LOG: debug
    run: |
      ./cantal-agent --host=0.0.0.0 --config-dir=/work/example-configs &
      while true; do
        for i in $(seq 0 500); do
          sleep 4 &
        done
        sleep 2
      done


  live: !Supervise
    description: Run cantal in container with live reload of frontend
    prerequisites: [make]
    children: &live
      cantal: !Command { <<: *run }
      webpack: !Command
        container: js
        work-dir: web
        run:
        - webpack-dev-server
        - --hot
        - --progress
        - --colors

  ten: !Supervise
    description: Runs ten cantals so you can test "remote" subsystem
    prerequisites: [make]
    children:
      n0: !Command
        container: xenial
        #environ: {CANTAL_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --cluster-name=local-test \
          --port 22682"
      n1: !Command
        container: xenial
        #environ: {CANTAL_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --cluster-name=local-test \
          --port 20001"
      n2: !Command
        container: xenial
        #environ: {CANTAL_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --cluster-name=local-test \
          --port 20002"
      n3: !Command
        container: xenial
        #environ: {CANTAL_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --cluster-name=local-test \
          --port 20003"
      n4: !Command
        container: xenial
        #environ: {CANTAL_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --cluster-name=local-test \
          --port 20004"
      n5: !Command
        container: xenial
        #environ: {CANTAL_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --cluster-name=local-test \
          --port 20005"
      n6: !Command
        container: xenial
        #environ: {CANTAL_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --cluster-name=local-test \
          --port 20006"
      n7: !Command
        container: xenial
        #environ: {CANTAL_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --cluster-name=local-test \
          --port 20007"
      n8: !Command
        container: xenial
        #environ: {CANTAL_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --cluster-name=local-test \
          --port 20008"
      n9: !Command
        container: xenial
        #environ: {CANTAL_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --cluster-name=local-test \
          --port 20009"
      connector: !Command
        container: xenial
        run: |
          sleep 2
          for i in $(seq 1 9); do
            wget http://localhost:$((20000+i))/add_host.json -nv -O- \
              --method POST --body-data '{"addr": "127.0.0.1:22682"}'
          done
          sleep 100000

  trio: !Supervise
    description: Runs three servers in network namespace
    prerequisites: [make]
    children:
      n1: !Command
        network: &n1
          ip: 172.23.0.1
          ports: {20001: 22682}
        container: xenial
        run: "./cantal-agent --host 172.23.0.1 --cluster-name=local-test"
      n2: !Command
        container: xenial
        network: &n2
          ip: 172.23.0.2
          ports: {20002: 22682}
        run: "./cantal-agent --host 172.23.0.2 --cluster-name=local-test"
      n3: !Command
        container: xenial
        network: &n3
          ip: 172.23.0.3
          ports: {20003: 22682}
        run: "./cantal-agent --host 172.23.0.3 --cluster-name=local-test"
      connector: !BridgeCommand
        container: net
        volumes:
          /usr/lib/vagga: !VaggaBin
        run: |
          sleep 2
          for i in $(seq 2 3); do
            curl http://172.23.0.1:22682/add_host.json -sf \
              -d'{"addr": "172.23.0.'$i':22682"}'
          done
          sleep 1000000

  carbon: &carbon !Command
    description: Run carbon (cantal can submit data to carbon)
    container: graphite
    work-dir: /opt/graphite
    run: |
      rm /opt/graphite/storage/carbon-cache-a.pid || true
      ./bin/carbon-cache.py start --debug

  graphite-web: &graphite !Command
    description: Run graphite-web (cantal can submit data to carbon)
    container: graphite
    work-dir: /opt/graphite/webapp/graphite
    run:
    - python
    - manage.py
    - runserver

  _init_graphite: !Command
    description: Init graphite-web (cantal can submit data to carbon)
    container: graphite
    work-dir: /opt/graphite/webapp/graphite
    run: |
      python manage.py syncdb --noinput
      mkdir -p /opt/graphite/storage/log/webapp

  graphite-live: !Supervise
    description: Run graphite-web (cantal can submit data to carbon)
    children:
      <<: *live
      graphite: *graphite
      carbon: *carbon

  _package-cli: !Command
    container: rust-musl
    prerequisites: [_make-js-for-package]
    run: |
      set -ex
      rm -rf dist/pkg || true
      version="$(git describe --dirty)"
      bulk with-version $version make cli-release
      make install-cli DESTDIR=/work/dist/pkg
      bulk pack \
        --package-version="${version}" \
        --config bulk-cli.yaml --dir dist/pkg --dest-dir dist

  _package-trusty: &package !Command
    container: trusty
    prerequisites: [_make-js-for-package]
    environ:
      CARGO_HOME: /cargo
    volumes:
      /cargo: !Persistent trusty-home
    run: |
      set -ex
      rm -rf dist/pkg || true
      rm -rf target/release/cantal-agent || true
      version="$(git describe --dirty | cut -c2-)"
      codename="$(lsb_release --codename --short)"
      bulk with-version $version make bin
      make install-agent DESTDIR=/work/dist/pkg
      bulk pack \
        --package-version="${version}+${codename}1" \
        --config bulk.yaml --dir dist/pkg --dest-dir dist

  _package-xenial: !Command
    container: xenial
    volumes:
      /cargo: !Persistent xenial-home
    <<: *package

  _package-bionic: !Command
    container: bionic
    volumes:
      /cargo: !Persistent bionic-home
    <<: *package


  packages: !Command
    container: trusty
    description: Build packages and repostories (mostly for CI)
    prerequisites: [_package-bionic, _package-xenial, _package-trusty,
                    _package-cli]
    accepts_arguments: true
    run: |
      bulk repo-add --config bulk-cli.yaml --repository-base dist/repos \
        dist/cantal-cli-*.deb "$@"
      bulk repo-add --config bulk.yaml --repository-base dist/repos \
        dist/cantal-[0-9]*.deb "$@"

containers:

  js:
    setup:
    - !Alpine v3.7
    - !YarnDependencies
      dir: "web"
    - !Install [git]
    - &bulk !Tar
      url: "https://github.com/tailhook/bulk/releases/download/v0.4.11/bulk-v0.4.11.tar.gz"
      sha256: b718bb8448e726690c94d98d004bf7575f7a429106ec26ad3faf11e0fd9a7978
      path: /
    environ:
      NODE_PATH: /usr/lib/node_modules
      HOME: /tmp

  bionic:
    setup:
    - !Ubuntu bionic
    - &pkgs !Install [git, ca-certificates, build-essential, libssl-dev, lsb-release]
    - &rust !TarInstall
      url: "https://static.rust-lang.org/dist/rust-1.25.0-x86_64-unknown-linux-gnu.tar.gz"
      script: "./install.sh --prefix=/usr \
                --components=rustc,rust-std-x86_64-unknown-linux-gnu,cargo"

    - *bulk
    - !EnsureDir /cargo
    environ: &environ
      HOME: /work/target

  net:
    setup:
    - !Alpine v3.7
    - !Install [curl, iproute2, iptables, bash, bind-tools]
    - !EnsureDir /usr/lib/vagga
    environ:
      PATH: /usr/lib/vagga:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin

  trusty:
    setup:
    - !Ubuntu trusty
    - *pkgs
    - *rust
    - *bulk
    - !EnsureDir /cargo
    environ: *environ

  xenial:
    setup:
    - !Ubuntu xenial
    - *pkgs
    - *rust
    - *bulk
    - !Install
      - wget  # just for 'vagga ten'
      - vim   # for tag notes
    - !EnsureDir /cargo
    environ: *environ

  doc:
    setup:
    - !Alpine v3.3
    - !Install [py-sphinx, py-sphinx_rtd_theme, make]

  graphite:
    setup:
    - !Alpine v3.3
    - !Install [tzdata]
    - !PipConfig { dependencies: true }
    - !Py2Install
      - twisted<12.0
    - !TarInstall
      url: https://launchpad.net/graphite/0.9/0.9.10/+download/whisper-0.9.10.tar.gz
      script: python setup.py install
    - !TarInstall
      url: https://launchpad.net/graphite/0.9/0.9.10/+download/carbon-0.9.10.tar.gz
      script: python setup.py install

    - !EnsureDir /var/lib/carbon
    - !EnsureDir /opt/graphite/conf
    - !Copy
      source: /work/integrations/carbon.conf
      path: /opt/graphite/conf/carbon.conf
    - !Copy
      source: /work/integrations/storage-schemas.conf
      path: /opt/graphite/conf/storage-schemas.conf

    - !Install [py-cairo, rrdtool-dev]
    - !Install
      - ttf-dejavu
      - ttf-liberation
      - ttf-ubuntu-font-family
    - !Py2Install
      - django<1.6
      - django-tagging<0.4
      - twisted<12.0
      - fields
      - pyparsing
      - rrdtool
      - whitenoise
      - python-memcached
      - pytz
    - !TarInstall
      url: https://launchpad.net/graphite/0.9/0.9.10/+download/graphite-web-0.9.10.tar.gz
      script: |
        python check-dependencies.py
        python setup.py install
    - !Copy
      source: /work/integrations/local_settings.py
      path: /opt/graphite/webapp/graphite/local_settings.py
    - !EnsureDir /opt/graphite/storage
    - !Sh |
        echo 'SECRET_KEY = "fails in local settings :("' \
          >> /opt/graphite/webapp/graphite/settings.py
    auto-clean: true
    volumes:
      /opt/graphite/storage: !Persistent
        name: graphite
        init-command: _init_graphite

  rust-musl:
    auto-clean: true
    environ: &rustenv
      LD_LIBRARY_PATH: /musl/lib/rustlib/x86_64-unknown-linux-musl/lib
      PATH: /musl/bin:/usr/local/bin:/usr/bin:/bin
      HOME: /work/target
    setup:
    - !Ubuntu xenial
    - !UbuntuUniverse
    - *pkgs
    - *rust
    - !TarInstall
      url: "https://static.rust-lang.org/dist/rust-std-1.25.0-x86_64-unknown-linux-musl.tar.gz"
      script: "./install.sh --prefix=/musl \
               --components=rust-std-x86_64-unknown-linux-musl"
    - !Sh 'ln -s /musl/lib/rustlib/x86_64-unknown-linux-musl /usr/lib/rustlib/x86_64-unknown-linux-musl'
    - *bulk

