commands:

  make-js: !Command
    description: Build javascripts
    container: js
    work-dir: web
    accepts-arguments: true
    run: |
      [ -d ../public/js ] || mkdir ../public/js
      exec webpack "$@"

  make-bin: !Command
    description: Build cantal binaries
    container: trusty
    run: [cargo, build, --release]

  make: !Command
    description: Build cantal binaries and javascript in ubuntu container
    container: trusty
    prerequisites: [make-bin, make-js]
    run: |
      cp ./target/release/cantal-agent .

  cargo: !Command
    description: Run arbitrary cargo command
    container: trusty
    run: [cargo]

  cargo-outdated: !Command
    description: Check for outdated dependencies
    container: outdated
    run: [cargo, outdated]

  doc: !Command
    description: Build HTML docs
    container: doc
    work-dir: docs
    run: [make, html]

  build-static-cli: !Command
    description: "Build static `cantal` binary. This is just for easier testing
      of metrics coverage. It doesn't build `cantal-agent` binary which you
      need for real work"
    container: rust-musl
    work-dir: cantal_values
    run: [cargo, build, --target=x86_64-unknown-linux-musl]
    epilog: |
      -------------------------------------------------------------------------
      Binary is build and placed in:
        cantal_values/target/x86_64-unknown-linux-musl/{release,debug}/cantal

  build-static-cli-package: !Command
    description: Build static command-line tool package
    container: rust-musl
    run: |
      set -ex
      (cd cantal_values; cargo build --target=x86_64-unknown-linux-musl)
      [ -d dist ] || mkdir dist
      tar -czf dist/cantal-cli-$(git describe).tar.gz \
        -C ./cantal_values/target/x86_64-unknown-linux-musl/release \
        cantal

  run: !Command
    prerequisites: [make]
    <<: &run
      description: Runs cantal (is not very useful run in container)
      container: trusty
      environ:
        RUST_LOG: debug
      run:
      - ./cantal-agent
      - --host=0.0.0.0
      - --config-dir=/work/example-configs

  live: !Supervise
    description: Run cantal in container with live reload of frontend
    prerequisites: [make]
    children: &live
      cantal: !Command { <<: *run }
      webpack: !Command
        container: js
        work-dir: web
        run:
        - webpack-dev-server
        - --hot
        - --progress
        - --colors

  ten: !Supervise
    description: Runs ten cantals so you can test "remote" subsystem
    prerequisites: [make]
    children:
      n0: !Command
        container: trusty
        #environ: {RUST_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --cluster-name=local-test \
          --port 22682"
      n1: !Command
        container: trusty
        #environ: {RUST_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --cluster-name=local-test \
          --port 20001"
      n2: !Command
        container: trusty
        #environ: {RUST_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --cluster-name=local-test \
          --port 20002"
      n3: !Command
        container: trusty
        #environ: {RUST_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --cluster-name=local-test \
          --port 20003"
      n4: !Command
        container: trusty
        #environ: {RUST_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --cluster-name=local-test \
          --port 20004"
      n5: !Command
        container: trusty
        #environ: {RUST_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --cluster-name=local-test \
          --port 20005"
      n6: !Command
        container: trusty
        #environ: {RUST_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --cluster-name=local-test \
          --port 20006"
      n7: !Command
        container: trusty
        #environ: {RUST_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --cluster-name=local-test \
          --port 20007"
      n8: !Command
        container: trusty
        #environ: {RUST_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --cluster-name=local-test \
          --port 20008"
      n9: !Command
        container: trusty
        #environ: {RUST_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --cluster-name=local-test \
          --port 20009"
      connector: !Command
        container: trusty
        run: |
          sleep 2
          for i in $(seq 1 9); do
            wget http://localhost:$((20000+i))/add_host.json -nv -O- \
              --method POST --body-data '{"addr": "127.0.0.1:22682"}'
          done
          sleep 100000

  carbon: &carbon !Command
    description: Run carbon (cantal can submit data to carbon)
    container: graphite
    work-dir: /opt/graphite
    run: |
      rm /work/integrations/tmp/carbon-cache-a.pid || true
      ./bin/carbon-cache.py start --debug

  graphite-web: &graphite !Command
    description: Run graphite-web (cantal can submit data to carbon). You
                 must run graphite-init before running this command
    container: graphite
    work-dir: /opt/graphite/webapp/graphite
    run:
    - python
    - manage.py
    - runserver

  init_graphite: !Command
    description: Init graphite-web (cantal can submit data to carbon)
    container: graphite
    work-dir: /opt/graphite/webapp/graphite
    run: |
      python manage.py syncdb --noinput
      mkdir -p /work/integrations/tmp/log/webapp

  graphite-live: !Supervise
    description: Run graphite-web (cantal can submit data to carbon). You
                 must run graphite-init before running this command
    children:
      <<: *live
      graphite: *graphite
      carbon: *carbon

  _package-cli: !Command
    container: rust-musl
    prerequisites: [make-js]
    run: |
      set -ex
      rm -rf dist/pkg || true
      version="$(git describe --dirty)"
      bulk with-version $version make cli-release
      make install-cli DESTDIR=/work/dist/pkg
      bulk pack \
        --package-version="${version}" \
        --config bulk-cli.yaml --dir dist/pkg --dest-dir dist

  _package-trusty: &package-upstart !Command
    container: trusty
    prerequisites: [make-js]
    run: |
      set -ex
      rm -rf dist/pkg || true
      rm -rf target/release/cantal-agent || true
      version="$(git describe --dirty | cut -c2-)"
      codename="$(lsb_release --codename --short)"
      bulk with-version $version make bin
      make install-agent DESTDIR=/work/dist/pkg
      bulk pack \
        --package-version="${version}~${codename}1.noinit" \
        --config bulk.yaml --dir dist/pkg --dest-dir dist
      make install-upstart DESTDIR=/work/dist/pkg
      bulk pack \
        --package-version="${version}~${codename}1" \
        --config bulk.yaml --dir dist/pkg --dest-dir dist

  _package-precise: !Command
    container: precise
    <<: *package-upstart

  _package-xenial: !Command
    container: xenial
    run: |
      set -ex
      rm -rf dist/pkg || true
      rm -rf target/release/cantal-agent || true
      version="$(git describe --dirty | cut -c2-)"
      codename="$(lsb_release --codename --short)"
      bulk with-version $version make bin
      make install-agent DESTDIR=/work/dist/pkg
      bulk pack \
        --package-version="${version}~${codename}1.noinit" \
        --config bulk.yaml --dir dist/pkg --dest-dir dist
      make install-systemd DESTDIR=/work/dist/pkg
      bulk pack \
        --package-version="${version}~${codename}1" \
        --config bulk.yaml --dir dist/pkg --dest-dir dist

  packages: !Command
    container: trusty
    description: Build packages and repostories (mostly for CI)
    prerequisites: [_package-trusty, _package-precise, _package-xenial,
                    _package-cli]
    accepts_arguments: true
    run: |
      bulk repo-add --config bulk-cli.yaml --repository-base dist/repos \
        dist/cantal-cli-*.deb "$@"
      bulk repo-add --config bulk.yaml --repository-base dist/repos \
        dist/cantal-[0-9]*.deb "$@"

containers:

  js:
    setup:
    - !Alpine v3.3
    - !NpmDependencies
      file: "web/package.json"
      optional: true
    environ:
      NODE_PATH: /usr/lib/node_modules

  precise:
    setup:
    - !Ubuntu precise
    - &pkgs !Install [git, make, ca-certificates, gcc, libssl-dev, lsb-release]
    - &rust !TarInstall
      url: "http://static.rust-lang.org/dist/rust-1.9.0-x86_64-unknown-linux-gnu.tar.gz"
      script: "./install.sh --prefix=/usr \
                --components=rustc,rust-std-x86_64-unknown-linux-gnu,cargo"

    - &bulk !Tar
      url: "http://files.zerogw.com/bulk/bulk-0.4.4.tar.gz"
      sha256: dd4e3fd37d0e26b774fa59b69e669f3a4a6a15812876601652c7d7002ae8e61a
      path: /
    environ: &environ
      HOME: /work/target

  trusty:
    setup:
    - !Ubuntu trusty
    - *pkgs
    - *rust
    - *bulk
    - !Install [wget] # just for 'vagga ten'
    environ: *environ

  xenial:
    setup:
    - !Ubuntu xenial
    - *pkgs
    - *rust
    - *bulk
    environ: *environ


  outdated:
    setup:
    - !Container trusty
    - !Sh cargo install --root=/usr cargo-outdated
    environ: *environ

  doc:
    setup:
    - !Alpine v3.3
    - !Install [py-sphinx, py-sphinx_rtd_theme, make]

  graphite:
    setup:
    - !Alpine v3.3
    - !Install [tzdata]
    - !PipConfig { dependencies: true }
    - !Py2Install
      - twisted<12.0
    - !TarInstall
      url: https://launchpad.net/graphite/0.9/0.9.10/+download/whisper-0.9.10.tar.gz
      script: python setup.py install
    - !TarInstall
      url: https://launchpad.net/graphite/0.9/0.9.10/+download/carbon-0.9.10.tar.gz
      script: python setup.py install

    - !EnsureDir /var/lib/carbon
    - !EnsureDir /opt/graphite/conf
    - !Copy
      source: /work/integrations/carbon.conf
      path: /opt/graphite/conf/carbon.conf
    - !Copy
      source: /work/integrations/storage-schemas.conf
      path: /opt/graphite/conf/storage-schemas.conf

    - !Install [py-cairo, rrdtool-dev]
    - !Install
      - ttf-dejavu
      - ttf-liberation
      - ttf-ubuntu-font-family
    - !Py2Install
      - django<1.6
      - django-tagging<0.4
      - twisted<12.0
      - fields
      - pyparsing
      - rrdtool
      - whitenoise
      - python-memcached
      - pytz
    - !TarInstall
      url: https://launchpad.net/graphite/0.9/0.9.10/+download/graphite-web-0.9.10.tar.gz
      script: |
        python check-dependencies.py
        python setup.py install
    - !Copy
      source: /work/integrations/local_settings.py
      path: /opt/graphite/webapp/graphite/local_settings.py
    - !EnsureDir /opt/graphite/storage
    - !Sh |
        echo 'SECRET_KEY = "fails in local settings :("' \
          >> /opt/graphite/webapp/graphite/settings.py
    auto-clean: true
    volumes:
      /opt/graphite/storage: !BindRW /work/integrations/tmp

  rust-musl:
    auto-clean: true
    environ: &rustenv
      LD_LIBRARY_PATH: /musl/lib/rustlib/x86_64-unknown-linux-musl/lib
      PATH: /musl/bin:/usr/local/bin:/usr/bin:/bin
      HOME: /work/target
    setup:
    - !Ubuntu xenial
    - !UbuntuUniverse
    - *pkgs
    - *rust
    - !TarInstall
      url: "http://static.rust-lang.org/dist/rust-std-1.9.0-x86_64-unknown-linux-musl.tar.gz"
      script: "./install.sh --prefix=/musl \
               --components=rust-std-x86_64-unknown-linux-musl"
    - !Sh 'ln -s /musl/lib/rustlib/x86_64-unknown-linux-musl /usr/lib/rustlib/x86_64-unknown-linux-musl'
    - *bulk

