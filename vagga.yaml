commands:

  make: !Command
    description: Build cantal binaries and javascript in ubuntu container
    container: ubuntu
    run: [make]

  cargo: !Command
    description: Run arbitrary cargo command
    container: ubuntu
    run: [cargo]

  docs: !Command
    description: Build HTML docs
    container: docs
    work-dir: docs
    run: [make, html]

  build-ubuntu-package: !Command
    description: Build ubuntu (trusty) package
    container: ubuntu
    write-mode: transient-hard-link-copy
    environ:
      PATH: /bin:/usr/bin:/usr/local/bin:/usr/local/sbin:/usr/sbin:/sbin
    run: |
      make bin js-release
      [ -d dist ] || mkdir dist
      checkinstall --default \
        --maintainer=paul@colomiets.name \
        --pkglicense=MIT --pkgname=cantal \
        --pkgversion="$(git describe | sed s/^v//)" \
        --requires="libssl1.0.0" \
        --nodoc --strip=no \
        --pakdir=dist \
        make install

  run: &run !Command
    description: Runs cantal (is not very useful run in container)
    container: ubuntu
    environ:
      RUST_LOG: debug
    run:
    - ./cantal-agent
    - --host=0.0.0.0
    - --config-dir=/work/example-configs

  live: !Supervise
    description: Run cantal in container with live reload of frontend
    children: &live
      cantal: *run
      webpack: !Command
        container: ubuntu
        work-dir: web
        environ:
          CANTAL_VERSION: "0.1.live"
        run:
        - webpack-dev-server
        - --hot
        - --progress
        - --colors

  ten: !Supervise
    description: Runs ten cantals so you can test "remote" subsystem
    children:
      n0: !Command
        container: ubuntu
        #environ: {RUST_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --config-dir=/work/example-configs \
          --port 22682"
      n1: !Command
        container: ubuntu
        #environ: {RUST_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --config-dir=/work/example-configs \
          --port 20001"
      n2: !Command
        container: ubuntu
        #environ: {RUST_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --config-dir=/work/example-configs \
          --port 20002"
      n3: !Command
        container: ubuntu
        #environ: {RUST_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --config-dir=/work/example-configs \
          --port 20003"
      n4: !Command
        container: ubuntu
        #environ: {RUST_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --config-dir=/work/example-configs \
          --port 20004"
      n5: !Command
        container: ubuntu
        #environ: {RUST_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --config-dir=/work/example-configs \
          --port 20005"
      n6: !Command
        container: ubuntu
        #environ: {RUST_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --config-dir=/work/example-configs \
          --port 20006"
      n7: !Command
        container: ubuntu
        #environ: {RUST_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --config-dir=/work/example-configs \
          --port 20007"
      n8: !Command
        container: ubuntu
        #environ: {RUST_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --config-dir=/work/example-configs \
          --port 20008"
      n9: !Command
        container: ubuntu
        #environ: {RUST_LOG: debug}
        run: "./cantal-agent --host 0.0.0.0 \
          --config-dir=/work/example-configs \
          --port 20009"
      connector: !Command
        container: ubuntu
        run: |
          sleep 2
          for i in $(seq 1 9); do
            wget http://localhost:$((20000+i))/add_host.json -nv -O- \
              --method POST --body-data '{"addr": "127.0.0.1:22682"}'
          done
          sleep 100000

  carbon: &carbon !Command
    description: Run carbon (cantal can submit data to carbon)
    container: graphite
    work-dir: /opt/graphite
    run: |
      rm /work/integrations/tmp/carbon-cache-a.pid || true
      ./bin/carbon-cache.py start --debug

  graphite-web: &graphite !Command
    description: Run graphite-web (cantal can submit data to carbon). You
                 must run graphite-init before running this command
    container: graphite
    work-dir: /opt/graphite/webapp/graphite
    run:
    - python
    - manage.py
    - runserver

  init_graphite: !Command
    description: Init graphite-web (cantal can submit data to carbon)
    container: graphite
    work-dir: /opt/graphite/webapp/graphite
    run: |
      python manage.py syncdb --noinput
      mkdir -p /work/integrations/tmp/log/webapp

  graphite-live: !Supervise
    description: Run graphite-web (cantal can submit data to carbon). You
                 must run graphite-init before running this command
    children:
      <<: *live
      graphite: *graphite
      carbon: *carbon

containers:

  ubuntu:
    setup:
    - !Ubuntu trusty
    - !UbuntuUniverse ~
    - !Install [make, checkinstall, wget, ca-certificates, libssl-dev, git]

    - !NpmDependencies
      file: "web/package.json"
      optional: true

    - !TarInstall
      url: "http://static.rust-lang.org/dist/rust-1.7.0-x86_64-unknown-linux-gnu.tar.gz"
      script: "./install.sh --prefix=/usr \
                --components=rustc,rust-std-x86_64-unknown-linux-gnu,cargo"

    environ:
      HOME: /work/target
      PATH: /bin:/usr/bin:/usr/local/bin
      NODE_PATH: /usr/local/lib/node_modules

  ubuntu-precise:
    # Only things needed for building binary
    setup:
    - !Ubuntu precise
    - !UbuntuUniverse ~
    - !Install [make, checkinstall, wget, ca-certificates, libssl-dev]
    - !Install [build-essential]

    - !TarInstall
      url: "http://static.rust-lang.org/dist/rust-1.7.0-x86_64-unknown-linux-gnu.tar.gz"
      script: "./install.sh --prefix=/usr \
                --components=rustc,rust-std-x86_64-unknown-linux-gnu,cargo"

    environ:
      HOME: /work/target
      PATH: /bin:/usr/bin:/usr/local/bin
      NODE_PATH: /usr/local/lib/node_modules

  docs:
    setup:
    - !Alpine v3.1
    - !Install [py-sphinx, make]

  graphite:
    setup:
    - !Alpine v3.3
    - !Install [tzdata]
    - !PipConfig { dependencies: true }
    - !Py2Install
      - twisted<12.0
    - !TarInstall
      url: https://launchpad.net/graphite/0.9/0.9.10/+download/whisper-0.9.10.tar.gz
      script: python setup.py install
    - !TarInstall
      url: https://launchpad.net/graphite/0.9/0.9.10/+download/carbon-0.9.10.tar.gz
      script: python setup.py install

    - !EnsureDir /var/lib/carbon
    - !EnsureDir /opt/graphite/conf
    - !Copy
      source: /work/integrations/carbon.conf
      path: /opt/graphite/conf/carbon.conf
    - !Copy
      source: /work/integrations/storage-schemas.conf
      path: /opt/graphite/conf/storage-schemas.conf

    - !Install [py-cairo, rrdtool-dev]
    - !Install
      - ttf-dejavu
      - ttf-liberation
      - ttf-ubuntu-font-family
    - !Py2Install
      - django<1.6
      - django-tagging<0.4
      - twisted<12.0
      - fields
      - pyparsing
      - rrdtool
      - whitenoise
      - python-memcached
      - pytz
    - !TarInstall
      url: https://launchpad.net/graphite/0.9/0.9.10/+download/graphite-web-0.9.10.tar.gz
      script: |
        python check-dependencies.py
        python setup.py install
    - !Copy
      source: /work/integrations/local_settings.py
      path: /opt/graphite/webapp/graphite/local_settings.py
    - !EnsureDir /opt/graphite/storage
    - !Sh |
        echo 'SECRET_KEY = "fails in local settings :("' \
          >> /opt/graphite/webapp/graphite/settings.py
    auto-clean: true
    volumes:
      /opt/graphite/storage: !BindRW /work/integrations/tmp


