commands:

  make: !Command
    description: Build cantal binaries and javascript in ubuntu container
    container: ubuntu
    run: [make]

  cargo: !Command
    description: Run arbitrary cargo command
    container: ubuntu
    run: [cargo]

  docs: !Command
    description: Build HTML docs
    container: docs
    work-dir: docs
    run: [make, html]

  build-ubuntu-package: !Command
    description: Build ubuntu (trusty) package
    container: ubuntu
    write-mode: transient-hard-link-copy
    environ:
      PATH: /bin:/usr/bin:/usr/local/bin:/usr/local/sbin:/usr/sbin:/sbin
    run: |
      make
      [ -d dist ] || mkdir dist
      checkinstall --default \
        --maintainer=paul@colomiets.name \
        --pkglicense=MIT --pkgname=cantal \
        --pkgversion="$(git describe)" \
        --requires="libssl1.0.0" \
        --nodoc --strip=no \
        --pakdir=dist \
        make install

  build-precise-package: !Command
    description: Build ubuntu (precise) package (must have js already built)
    container: ubuntu-precise
    write-mode: transient-hard-link-copy
    environ:
      PATH: /bin:/usr/bin:/usr/local/bin:/usr/local/sbin:/usr/sbin:/sbin
    run: |
      make bin
      [ -d dist ] || mkdir dist
      checkinstall --default \
        --maintainer=paul@colomiets.name \
        --pkglicense=MIT --pkgname=cantal \
        --pkgversion="$(cat version.txt)" \
        --requires="libssl1.0.0" \
        --nodoc --strip=no \
        --pakdir=dist \
        make install

  run: &run !Command
    description: Runs cantal (is not very useful run in container)
    container: ubuntu
    environ:
      RUST_LOG: debug
    run: ./cantal-agent --host 0.0.0.0

  live: !Supervise
    description: Run cantal in container with live reload of frontend
    children:
      cantal: *run
      webpack: !Command
        container: ubuntu
        work-dir: web
        environ:
          CANTAL_VERSION: "0.1.live"
        run:
        - webpack-dev-server
        - --hot
        - --progress
        - --colors

  ten: !Supervise
    description: Runs ten cantals so you can test "remote" subsystem
    children:
      n0: !Command
        container: ubuntu
        #environ: {RUST_LOG: debug}
        run: ./cantal-agent --host 0.0.0.0 --port 20000
      n1: !Command
        container: ubuntu
        #environ: {RUST_LOG: debug}
        run: ./cantal-agent --host 0.0.0.0 --port 20001
      n2: !Command
        container: ubuntu
        #environ: {RUST_LOG: debug}
        run: ./cantal-agent --host 0.0.0.0 --port 20002
      n3: !Command
        container: ubuntu
        #environ: {RUST_LOG: debug}
        run: ./cantal-agent --host 0.0.0.0 --port 20003
      n4: !Command
        container: ubuntu
        #environ: {RUST_LOG: debug}
        run: ./cantal-agent --host 0.0.0.0 --port 20004
      n5: !Command
        container: ubuntu
        #environ: {RUST_LOG: debug}
        run: ./cantal-agent --host 0.0.0.0 --port 20005
      n6: !Command
        container: ubuntu
        #environ: {RUST_LOG: debug}
        run: ./cantal-agent --host 0.0.0.0 --port 20006
      n7: !Command
        container: ubuntu
        #environ: {RUST_LOG: debug}
        run: ./cantal-agent --host 0.0.0.0 --port 20007
      n8: !Command
        container: ubuntu
        #environ: {RUST_LOG: debug}
        run: ./cantal-agent --host 0.0.0.0 --port 20008
      n9: !Command
        container: ubuntu
        #environ: {RUST_LOG: debug}
        run: ./cantal-agent --host 0.0.0.0 --port 20009
      connector: !Command
        container: ubuntu
        run: |
          sleep 2
          for i in $(seq 1 9); do
            wget http://localhost:$((20000+i))/add_host.json -nv -O- \
              --method POST --body-data '{"addr": "127.0.0.1:20000"}'
          done
          sleep 100000

containers:

  ubuntu:
    setup:
    - !Ubuntu trusty
    - !UbuntuUniverse ~
    - !Install [make, checkinstall, wget, ca-certificates, libssl-dev, git]

    - !NpmDependencies
      file: "web/package.json"
      optional: true

    - !TarInstall
      url: "http://static.rust-lang.org/dist/rust-1.5.0-x86_64-unknown-linux-gnu.tar.gz"
      script: "./install.sh --prefix=/usr \
                --components=rustc,rust-std-x86_64-unknown-linux-gnu,cargo"

    environ:
      HOME: /work/target
      PATH: /bin:/usr/bin:/usr/local/bin
      NODE_PATH: /usr/local/lib/node_modules

  ubuntu-precise:
    # Only things needed for building binary
    setup:
    - !Ubuntu precise
    - !UbuntuUniverse ~
    - !Install [make, checkinstall, wget, ca-certificates, libssl-dev]
    - !Install [build-essential]

    - !TarInstall
      url: "http://static.rust-lang.org/dist/rust-1.5.0-x86_64-unknown-linux-gnu.tar.gz"
      script: "./install.sh --prefix=/usr \
                --components=rustc,rust-std-x86_64-unknown-linux-gnu,cargo"

    environ:
      HOME: /work/target
      PATH: /bin:/usr/bin:/usr/local/bin
      NODE_PATH: /usr/local/lib/node_modules

  docs:
    setup:
    - !Alpine v3.1
    - !Install [py-sphinx, make]

  msgpack:
    setup:
    - !Alpine v3.1
    - !Py2Install [msgpack-python]

